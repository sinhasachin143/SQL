
-- Q1: Rank the customers based on the total amount they've spent on rentals.
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Q2: Calculate the cumulative revenue generated by each film over time.
SELECT f.film_id, f.title, p.payment_date, SUM(p.amount) AS daily_revenue,
       SUM(SUM(p.amount)) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY f.film_id, f.title, p.payment_date;

-- Q3: Determine the average rental duration for each film, considering films with similar lengths.
SELECT film_id, title, length, rental_duration,
       AVG(rental_duration) OVER (PARTITION BY length) AS avg_duration_by_length
FROM film;

-- Q4: Identify the top 3 films in each category based on their rental counts.
SELECT category_id, category_name, film_id, title, rental_count
FROM (
    SELECT c.category_id, c.name AS category_name, f.film_id, f.title, COUNT(r.rental_id) AS rental_count,
           RANK() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank_within_category
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.category_id, c.name, f.film_id, f.title
) ranked
WHERE rank_within_category <= 3;

-- Q5: Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT customer_id, total_rentals,
       total_rentals - AVG(total_rentals) OVER () AS difference_from_avg
FROM (
    SELECT r.customer_id, COUNT(*) AS total_rentals
    FROM rental r
    GROUP BY r.customer_id
) AS customer_rentals;

-- Q6: Find the monthly revenue trend for the entire rental store over time.
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month, SUM(p.amount) AS monthly_revenue,
       SUM(SUM(p.amount)) OVER (ORDER BY DATE_FORMAT(p.payment_date, '%Y-%m')) AS running_total
FROM payment p
GROUP BY month;

-- Q7: Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH customer_spending AS (
    SELECT p.customer_id, SUM(p.amount) AS total_spent
    FROM payment p
    GROUP BY p.customer_id
)
SELECT * FROM (
    SELECT cs.*, NTILE(5) OVER (ORDER BY cs.total_spent DESC) AS spending_percentile
    FROM customer_spending cs
) ranked
WHERE spending_percentile = 1;

-- Q8: Calculate the running total of rentals per category, ordered by rental count.
SELECT category, rental_count,
       SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM (
    SELECT c.name AS category, COUNT(r.rental_id) AS rental_count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name
) counts;

-- Q9: Find the films that have been rented less than the average rental count for their respective categories.
WITH rental_stats AS (
    SELECT c.name AS category, f.film_id, f.title, COUNT(r.rental_id) AS rental_count,
           AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS avg_count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name, f.film_id, f.title
)
SELECT * FROM rental_stats
WHERE rental_count < avg_count;

-- Q10: Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT month, monthly_revenue
FROM (
    SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month, SUM(p.amount) AS monthly_revenue,
           RANK() OVER (ORDER BY SUM(p.amount) DESC) AS month_rank
    FROM payment p
    GROUP BY month
) ranked
WHERE month_rank <= 5;
